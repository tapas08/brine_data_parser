import argparse
import pandas as pd

_expected_headers = [
    'order_id', 'customer_id', 'order_date', 
    'product_id', 'product_name', 'product_price', 
    'quantity'
]

def is_valid_data(sales_data):
    """
    Valid if the csv is in correct format.
    This is a basic validity check to see if it includes all the correct
    headers.
    :args sales_data: file path to sales data
    """
    df = pd.read_csv(sales_data)
    headers = df.columns.to_list()

    return not set(headers).difference(_expected_headers)

def get_numbers(sales_data):
    """
    This function will print the following numbers,
    - Month wise sales
    - Sales per product
    - Sales per customer
    - Top 10 customers by revenue generated
    """
    df = pd.read_csv(sales_data)

    # Get Sales number
    df['sales'] = df['product_price'] * df['quantity']

    # Get total revenue by `month`
    df.index = pd.to_datetime(df['order_date'], format="mixed")
    df.index.name = 'order_month'
    # df.index = pd.to_datetime(df.index, format='%m').month_name()
    revenue_by_month = df.groupby(df.index).sum()
    print("\n--- Revenue per month ---")
    print(revenue_by_month.loc[:, ['sales']])

    # Get total revenue generated by `product`
    revenue_by_product = df.groupby(['product_name']).sum()
    print("\n--- Revenue per product ---")
    print(revenue_by_product.loc[:, ['sales']])

    # Get total revenue generated by `customer`
    revenue_by_customers = df.groupby(['customer_id']).sum().sort_values(by=['sales'], ascending=False)
    print("\n--- Revenue per customer ---")
    print(revenue_by_customers.loc[:, ['sales']])

    # Get top 10 customers
    top_ten_customers = revenue_by_customers.head(10)
    print("\n--- Top 10 customers ---")
    print(top_ten_customers.loc[:, ['sales']])


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        prog='Data Parser'
    )

    parser.add_argument('--sales_data', help='Path to sales data csv file.')

    args = parser.parse_args()
    sales_data = args.sales_data

    if not is_valid_data(sales_data):
        print(f"The given csv file is in incorrect format. Expected headers, {' '.join(_expected_headers)}")
        exit(1)

    # sales_data = 'data/customer.csv'
    
    get_numbers(sales_data)
